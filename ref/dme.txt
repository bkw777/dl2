The DMEReq sequence works like this:
 
DMEReq is a mutual-recognition scheme that both TS-DOS and Desk-Link
(the original commercial Desk-Link for MS-DOS by Travelling Software Inc,
the same who also made TS-DOS) use to recognize each other,
while using only "legal" TPDD commands and responses on both sides.

* TS-DOS has to detect if it is talking to Desk-Link
  without confusing a real drive or any other server.

* Desk-Link has to detect if it is talking to TS-DOS
  without confusing FLOPPY or any other client.
 
The total sequence that TS-DOS sends is:
  4D 31 0D 5A 5A 08 00 F7 0D
  aka
  M  1  \r Z  Z  [] [] [] \r
 
This breaks down as a sequence of 3 things:

1)  3 bytes "M1\r" is the FDC-mode command to switch to Operation-mode.

  If a real drive drive was already in Operation-mode, then these bytes
  have no effect, as a drive in Operation-mode is reading bytes and silently
  ignoring everything until it gets two 0x5A (Z) in a row.
  
  If a real drive was in FDC-mode, then this is just the valid FDC-mode command
  to switch to Operation-mode. This command does not send back any response.
  
  Either way, the command was safe to blindly send to the drive, and
  either way, you know the drive is not stuck waiting for you to read
  anything from it, and you know the drive should now be in Operation-mode
  instead of the unknown initial state.

2)  5 bytes "ZZ" 08 00 F7 is the Operation-mode command to switch to FDC-mode.

  The drive should definitely be in Operation-mode now, and this is just a
  normal Operation-mode command, so this command should be processed normally.
  
  This command also does not send back any kind of response or result back
  to the client. The drive is simply now no longer scanning for "ZZ" but is
  instead reading command lines that end with "\r".

3)  1 byte "\r" is the terminator for FDC-mode commands.

  The drive is in FDC-mode, and while in FDC-mode a lone "\r" is essentially
  an empty command.
  
  A real drive sends back a standard FDC-mode response block containing the
  result code that means "invalid command"

TS-DOS sends the above sequence twice in a row. Some versions actually
send 3 times in a row with no trailing \r on the 3rd time.

dl2 responds like a real drive the first time through, so as to 
be compatible with FLOPPY and other standard clients. On the 2nd time through,
dl2 concludes the client is TS-DOS requesting directory extensions.

In that case, on the 2nd FDC request, instead of actually switching to
FDC-mode and sending back an "invalid command" response, dl2 stays in
Operation-mode, and sends back a DME packet. A DME response packet is
technically an illegal or malformed Operation-mode return packet
with format code 0x12 but 11 bytes of payload data instead of 1.
Return format 0x12 has only one valid payload size which is 1 byte,
not 11 or any other value. A real drive can never send a return packet
like this, so this helps TS-DOS verify that it is receiving a DME packet
instead of an actual 0x12 packet.

The 11 byte payload is:
0x00 0x## 0x## 0x## 0x## 0x## 0x## 0x2E 0x3C 0x3E 0x20
NULL ABCDEF.<> SPACE

The full packet is:
0x12 0x0B 11_bytes checksum

dl2 then rembers that there is a dme request in progress until it gets a
dirent(get-first) command. The dme-in-progress flag tells dirent() to include
the directory names in the file list it generates. Then the flag is reset
at the end of the directory listing process, so that legit switch-to-FDC-mode
commands will still work.

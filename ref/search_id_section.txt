TPDD1 FDC-mode command "S" - Search ID Section
bkw

The software manual says almost nothing about this command. It only says:

  "The procedure is similar to that for the Write Sector command,
   except that you send a search string instead of data to be written."

So here is what I have found through some trial & error with a real drive.

pdd.sh has an implementation of the client side of this and is working with real TPDD drives.

dlplus does not yet implement the server side of this.
|
This function is not actually used by TS-DOS, DSKMGR, TEENY, Floppy, nor Sardine as far as I have seen so far.

The process is actually more like the Write ID Section command.

 1 - client sends "S" and carriage-return
 
 2 - drive responds with standard FDC-mode 8-byte response packet

     client parses the response the same as with any other FDC-mode command

     if the response is not success, abort operation
       drive returns to waiting for new commands
       client should not send or expect anything more for this operation
     otherwise, proceed...

 3 - client sends exactly 12 bytes of data
     right-pad with 0x00 and truncate to 12 bytes as necessary

     drive works for up to 40 seconds searching all 80 tracks for a match
     drive does not send enything during this time
     client must not send anything during this time

 4 - drive sends a standard FDC-mode 8-byte response block
     2 bytes - hex pair status/error code: 0=success 60=not-found other=various errors
     2 bytes - hex pair result data: physical sector number if found, or 255 if not found or error
     4 bytes - 2 hex pairs result offset/length/size: logical sector size for indicated physical sector

 * Initial command syntax is simply "S", with no parameters.
   Most FDC-mode commands either require or at least optionally take
   one or two parameters for physical sector number and logical sector number,
   or logical sector size code in the case of the fdc-format command.
   This command gives an error 61 if given any parameters, they aren't simply ignored.

 * In the second stage where you send the search data, the client must send exactly 12 bytes.
   Sending any fewer that 12 hangs the drive (it's waiting unknown time for the rest of the bytes).
   Extra bytes get dropped or interpreted as the next command or hangs the drive.

There seems to be no way to search for multiple matching records.
You (apparently) can't supply any track# parameter to start searching after a previously found match,
and repeating the same search just produces the same result which is the first match counting from track 0.


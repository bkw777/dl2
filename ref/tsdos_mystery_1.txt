TS-DOS "mystery command 1"

Summary: 0x31 is a TPDD2 sector cache write command which TS-DOS uses to detect a TPDD2 drive.

This code used to refer to something it called TS-DOS mystery command 1
Most other tpdd emulators do as well.

TS-DOS performs a few different tests at start-up to determine if the drive is a TPDD1,
TPDD2, or an emulator that supports TS-DOS directory extensions.

The complete detection routine can be seen in the TS-DOS disassembly here:
http://bitchin100.com/wiki/index.php?title=M100_TS-DOS_ROM_TPDD_Protocol
See these sections:
 ; Configure baud, test for NADSBox, get NADSBox dir
 ; Send mystery opcodes
 ; Send M1 and test for NADSBox / Desklink response
 ; Strings and table data

In total TS-DOS sends a few different odd commands:
  * 0x23
  * 0x31
  * slightly malformed FDC/Operation mode switch commands that
    TS-DOS and Desk-Link(1)(2) use to mutually recognize each other.

This document only covers the 0x31 command.

In TS-DOS, this command appears to be used only for detecting a TPDD2 drive.

IE probably not also part of detecting Desk-Link, because that is handled by
the special TPDD1 FDC/Operation mode switch flip flop sequence, aka "DMEReq".
http://bitchin100.com/wiki/index.php?title=Desklink/TS-DOS_Directory_Access

What 0x31 really is, to a TPDD2 drive:

Request 0x31 is used to write data from the client to the sector cache in a
TPDD2 drive (1280 bytes of ram in the drive that holds one full disk sector).
The command has 2 "modes" (2 known so far). "mode 0" takes normal data that
eventually gets written to the data section of a disk sector. "mode 1" takes
sector metadata that gets written to the disk but outside of the data section
of a given sector, like in the ID section, and/or drive control instructions
that don't get written to disk anywhere.

TS-DOS sends 3 different static/canned "mode 1" commands, and apparently
only looks at the length of the response to see if it is a single byte or not.

The format of a cache write command is:
preamble  | cmd  | len | mode | o_msb | o_lsb | data... | checksum
0x5A 0x5A | 0x31 | ##  | ##   | ##    | ##    | ## ...  | ##

len is a single byte representing the length of the mode through data fields,
inclusive. data may range from 0x00 to 0x40 bytes long, so len is 0x03 to 0x43

mode is a single byte 0x00 or 0x01

o_msb is a single byte, MSB of the offset into the full sector

o_lsb is a single byte, LSB of the offset into the full sector

data is 0 to 64 bytes of payload data

checksum is a single byte standard tpdd checksum of the mode through data fields inclusive


TS-DOS has the following canned 0x31 commands that it sends during start-up:
4AE9H  DB	"ZZ1",0x04,0x01,0x00,0x84,0xFF,"F"
4AF0H  DB	"ZZ1",0x04,0x01,0x00,0x96,0x0F,0x24
4AF9H  DB	"ZZ1",0x04,0x01,0x00,0x94,0x0F,0x26

The "1" in "ZZ1" is really 0x31, but the disassembler just decided
"ZZ1" looked like a string and represented it that way.
The same goes for the "F". It's not a letter "F", it's a checksum
that works out to 0x46, which happens to also be ascii "F".

The disassembly above could more properly be re-written as:

4AE9H  DB	0x5A,0x5A,0x31,0x04,0x01,0x00,0x84,0xFF,0x46
4AF0H  DB	0x5A,0x5A,0x31,0x04,0x01,0x00,0x96,0x0F,0x24
4AF9H  DB	0x5A,0x5A,0x31,0x04,0x01,0x00,0x94,0x0F,0x26

The command breaks down as:

0x5A  Z preamble 1/2
0x5A  Z preamble 2/2
0x31  REQ_CACHE_WRITE
0x04  4 bytes packet length
0x01    1/4: mode 1 (metadata/control, not normal data)
0x00    2/4: offset msb
0x84    3/4: offset lsb
0xFF    4/4: data (single byte of actual payload data, unknown function)
0x46  checksum from 0x31 to 0xFF

The following bash one-liner corroborates the checksum
$ printf '0x%x\n' $(( ( (0x31+0x04+0x01+0x00+0x84+0xff) & 0xff ) ^ 0xff ))
0x46

So now you could add comments to the disassembly:
4AE9H  DB 0x5A,0x5A,0x31,0x04,0x01,0x00,0x84,0xFF,0x46 ; tpdd2_cache_write mode:1 offset:132 data:255
4AF0H  DB 0x5A,0x5A,0x31,0x04,0x01,0x00,0x96,0x0F,0x24 ; tpdd2_cache_write mode:1 offset:150 data:16
4AF9H  DB 0x5A,0x5A,0x31,0x04,0x01,0x00,0x94,0x0F,0x26 ; tpdd2_cache_write mode:1 offset:148 data:16

(assuming the "offset" bytes do mean "offset" in mode 1 the way
 they do in mode 0, which is not a safe assumption)

"mode 1" cache writes have unknown function, but appear to have both metadata
and drive control functions.

Some mode 1 cache writes do not appear to end up written to disk, but some do.

The TPDD2 disk backup utility sends 3 0x31 commands for every sector, after
filling the sector cache, to write the cache to disk.

The first 2 of those are always the same and do not appear to be written to disk,
which suggests they are drive control commands. Since they come *after*
filling the cache from the client, they can't be for instance, to clear
the cache to all 00's, so it's unknown what they do.

The 3rd contains data that is different if the normal data for the
assosciated sector is different, and this data may be read back from a disk
later by doing a cache read command with the same mode 1 flag at the same
"offset" (assuming again), after loading the same physical sector from disk
into cache with the 0x30 command. Which suggests that 3rd 0x31 is metadata,
stored somewhere on-disk but not in the data part of a sector.

This much has been verified at least in so far as simply aping the actions
of the TPDD2 backup util is enough to produce functional copies of disks.
https://github.com/bkw777/pdd.sh implements this and can successfully copy
TPDD2 disks, including "special" ones like the TPDD2 utility disk which has
strange data that no normal tpdd client can copy.

To show it in action, here is a log of traffic at the end of a sector-write
during a TPDD2 disk copy. Excerpted from the full session capture here:
https://trs80stuff.net/tpdd/tpdd2_boot_disk_backup_log_hex.txt

There are 4 commands here, in order: 0x31, 0x31, 0x30, 0x31.
They are coming after one full sector cache has been filled, and now
needs to be written to disk.

The first 2 0x31 comands and 0x38 responses are identical for every sector.
The data from those commands does not appear to be written to disk, so they
appear to be drive control commands.

The 0x30 is telling the drive what physical track & sector on the disk to
work on, and in which direction, cache-to-disk or disk-to-cache.
5A 5A 30 05 02 00 04 00 01 C3

5A  preamble 1/2
5A  preamble 2/2
30  REQ_CACHE_LOAD
05  5 bytes packet length
02    1/5 mode 2 (00=disk-to-cache 02=cache-to-disk)
00    2/5 unknown (always 00)
04    3/5 track number 4 (00-4F)
00    4/5 unknown (always 00)
01    5/5 sector number 1 (00-01)
C3  checksum

So this is committing the cache to the physical media at track 5 sector 1.

The final 0x31 IS written to disk, and can be read back from the disk later,
but does not appear anywhere in the data block of any sector. There are other
parts of the physical disk that hold metadata and housekeeping data that the
drive itself uses internally as part of the filesystem. This must be stored
in one of those areas.

The 0x38 responses from the drive are the standard/shared response block
for both REQ_CACHE_LOAD (0x30) and REQ_CACHE_WRITE (0x31), and in this case
all 4 of these responses just says
"cache action (0x38) mode 1 (0x01) success (0x00) checksum (0xC6)"

[M100] - 5A 5A 31 04 01 00 83 00 46
[TPDD] - 38 01 00 C6
[M100] - 5A 5A 31 04 01 00 96 00 33
[TPDD] - 38 01 00 C6
[M100] - 5A 5A 30 05 02 00 04 00 01 C3
[TPDD] - 38 01 00 C6
[M100] - 5A 5A 31 07 01 80 04 96 FF 00 00 AD
[TPDD] - 38 01 00 C6

The upshot of all this is that TS-DOS is using this command to tickle TPDD2
drives in a way that is only meaningful to TPDD2 drives, is harmlessly ignored
by TPDD1 drives and un-aware emulators, does not modify disk contents even on a
TPDD2, but lets TS-DOS detect that the drive is a TPDD2 from the responses.

It doesn't *appear* to be doing anything else like configuring some aspect of
drive behavior, but since we don't know exactly what those commands do, it could be.


------------------------------------------------------------------------------------

(1) The original commercial MS-DOS Booster-Link / Desk-Link,
  from the same Travelling Software as TS-DOS.
  https://ftp.whtech.com/club100/com/dl-arc.exe.gz
  $ strings DESKLINK.COM |less
                           DESK-LINK (version 1.05)
                      (c) 1987, Traveling Software, Inc.


(2) The NADSBox references in the TS-DOS disassembly are the disassembler's remarks,
not part of the original source code. Originally, Travelling Software made both
TS-DOS and Desk-Link, and gave them both this extra functionality when used
together, many years before NADSBox existed. The disassembly was made later by
Ken Petit, who also made the NADSBox.
